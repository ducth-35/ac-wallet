{"version":3,"sources":["CurrencyInput.tsx"],"names":["React","TextInput","formatNumber","forwardRef","props","ref","value","onChangeText","onChangeValue","separator","delimiter","unit","precision","maxValue","minValue","ignoreNegative","rest","startNegative","setStartNegative","useState","formattedValue","useMemo","useEffect","handleChangeText","useCallback","text","textWithoutUnit","replace","test","negative","charAt","textNumericValue","numberValue","Number","zerosOnValue","length","newValue"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { TextInput } from 'react-native';\n\nimport formatNumber from './utils/formatNumber';\nimport type { CurrencyInputProps } from './props';\n\nexport default React.forwardRef<TextInput, CurrencyInputProps>((props, ref) => {\n  const {\n    value,\n    onChangeText,\n    onChangeValue,\n    separator,\n    delimiter,\n    unit = '',\n    precision = 2,\n    maxValue,\n    minValue,\n    ignoreNegative,\n    ...rest\n  } = props;\n\n  const [startNegative, setStartNegative] = React.useState(false);\n\n  const formattedValue = React.useMemo(() => {\n    if (!!value || value === 0 || value === -0) {\n      return formatNumber(value, {\n        separator,\n        unit,\n        precision,\n        delimiter,\n        ignoreNegative: !!ignoreNegative,\n      });\n    } else {\n      return '';\n    }\n  }, [delimiter, ignoreNegative, precision, separator, unit, value]);\n\n  React.useEffect(() => {\n    onChangeText && onChangeText(formattedValue);\n  }, [formattedValue]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const handleChangeText = React.useCallback(\n    (text: string) => {\n      const textWithoutUnit = text.replace(unit, '');\n\n      // Allow starting with a minus sign\n      if (/^(-|-0)$/.test(textWithoutUnit) && !ignoreNegative) {\n        setStartNegative(true);\n        onChangeText && onChangeText(unit + '-');\n        return;\n      } else {\n        setStartNegative(false);\n      }\n\n      const negative = textWithoutUnit.charAt(0) === '-';\n\n      const textNumericValue = text.replace(/\\D+/g, '');\n\n      const numberValue = Number(textNumericValue) * (negative ? -1 : 1);\n\n      const zerosOnValue = textNumericValue.replace(/[^0]/g, '').length;\n\n      let newValue: number | null;\n\n      if (!textNumericValue || (!numberValue && zerosOnValue === precision)) {\n        // Allow to clean the value instead of beign 0\n        newValue = null;\n      } else {\n        newValue = numberValue / 10 ** precision;\n      }\n\n      if (newValue && maxValue && newValue > maxValue) {\n        return;\n      } else if (newValue && minValue && newValue < minValue) {\n        return;\n      }\n\n      onChangeValue && onChangeValue(newValue);\n    },\n    [\n      unit,\n      ignoreNegative,\n      precision,\n      maxValue,\n      minValue,\n      onChangeValue,\n      onChangeText,\n    ]\n  );\n\n  return (\n    <TextInput\n      value={startNegative ? unit + '-' : formattedValue}\n      onChangeText={handleChangeText}\n      keyboardType=\"numeric\"\n      {...rest}\n      ref={ref}\n    />\n  );\n});\n"]}