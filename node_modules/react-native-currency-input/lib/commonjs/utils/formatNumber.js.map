{"version":3,"sources":["formatNumber.ts"],"names":["input","options","precision","separator","delimiter","unit","ignoreNegative","negative","sign","string","Math","abs","toFixed","parts","split","buffer","number","length","unshift","substr","max","formattedNumber","join","decimals"],"mappings":";;;;;;;eAEe,CAACA,KAAD,EAAgBC,OAAhB,KAAkD;AAC/D,QAAM;AACJC,IAAAA,SADI;AAEJC,IAAAA,SAAS,GAAG,GAFR;AAGJC,IAAAA,SAAS,GAAG,GAHR;AAIJC,IAAAA,IAAI,GAAG,EAJH;AAKJC,IAAAA;AALI,MAMFL,OAAO,IAAI,EANf;AAQA,QAAMM,QAAQ,GAAGD,cAAc,GAAG,KAAH,GAAWN,KAAK,GAAG,CAAlD;AACA,QAAMQ,IAAI,GAAGD,QAAQ,GAAG,GAAH,GAAS,EAA9B;AAEA,QAAME,MAAM,GAAGC,IAAI,CAACC,GAAL,CAASX,KAAT,EAAgBY,OAAhB,CAAwBV,SAAxB,CAAf;AAEA,QAAMW,KAAK,GAAGJ,MAAM,CAACK,KAAP,CAAa,GAAb,CAAd;AACA,QAAMC,MAAM,GAAG,EAAf;AAEA,MAAIC,MAAM,GAAGH,KAAK,CAAC,CAAD,CAAlB;;AACA,SAAOG,MAAM,CAACC,MAAP,GAAgB,CAAvB,EAA0B;AACxBF,IAAAA,MAAM,CAACG,OAAP,CAAeF,MAAM,CAACG,MAAP,CAAcT,IAAI,CAACU,GAAL,CAAS,CAAT,EAAYJ,MAAM,CAACC,MAAP,GAAgB,CAA5B,CAAd,EAA8C,CAA9C,CAAf;AACAD,IAAAA,MAAM,GAAGA,MAAM,CAACG,MAAP,CAAc,CAAd,EAAiBH,MAAM,CAACC,MAAP,GAAgB,CAAjC,CAAT;AACD;;AAED,MAAII,eAAe,GAAG,EAAtB;AACAA,EAAAA,eAAe,GAAGN,MAAM,CAACO,IAAP,CAAYlB,SAAZ,CAAlB;AAEA,QAAMmB,QAAQ,GAAGV,KAAK,CAAC,CAAD,CAAtB;;AACA,MAAI,CAAC,CAACX,SAAF,IAAeqB,QAAnB,EAA6B;AAC3BF,IAAAA,eAAe,IAAIlB,SAAS,GAAGoB,QAA/B;AACD;;AAEDF,EAAAA,eAAe,aAAMhB,IAAN,SAAaG,IAAb,SAAoBa,eAApB,CAAf;AAEA,SAAOA,eAAP;AACD,C","sourcesContent":["import type { FormatNumberOptions } from '../props';\n\nexport default (input: number, options?: FormatNumberOptions) => {\n  const {\n    precision,\n    separator = ',',\n    delimiter = '.',\n    unit = '',\n    ignoreNegative,\n  } = options || {};\n\n  const negative = ignoreNegative ? false : input < 0;\n  const sign = negative ? '-' : '';\n\n  const string = Math.abs(input).toFixed(precision);\n\n  const parts = string.split('.');\n  const buffer = [];\n\n  let number = parts[0];\n  while (number.length > 0) {\n    buffer.unshift(number.substr(Math.max(0, number.length - 3), 3));\n    number = number.substr(0, number.length - 3);\n  }\n\n  let formattedNumber = '';\n  formattedNumber = buffer.join(delimiter);\n\n  const decimals = parts[1];\n  if (!!precision && decimals) {\n    formattedNumber += separator + decimals;\n  }\n\n  formattedNumber = `${unit}${sign}${formattedNumber}`;\n\n  return formattedNumber;\n};\n"]}